Checking, updating, validationg gtf and genome files for non-model organisms (particularly, bacteria and viral genomes)

# check feature types present in gtf
zcat GCA_003097695.1_ASM309769v1_genomic.gtf.gz | awk -F"\t" '{print $3}' | sort | uniq -c > summary_of_GCA_003097695.1_ASM309769v1_genomic.gtf.gz.txt
	
	RESULT OF COMMAND:
		4 
		3610 CDS
		124 exon
		3734 gene
		3610 start_codon
		3610 stop_codon
		124 transcript


# check strandedness in gtf
zcat GCA_003097695.1_ASM309769v1_genomic.gtf.gz |awk -F"\t" '{print $7}' | sort | uniq -c

	RESULT OF COMMAND:
		4 
   		7370 +
   		7442 -      		

# check if there is a pattern in exon vs CDS
zcat GCA_003097695.1_ASM309769v1_genomic.gtf.gz | awk -F"\t" '$3=="exon" {print $0}' | awk -F"\t" '{print $2}' | sort | uniq -c

	RESULT OF COMMAND:
     		124 Genbank

zcat GCA_003097695.1_ASM309769v1_genomic.gtf.gz | awk -F"\t" '$3=="CDS" {print $0}' | awk -F"\t" '{print $2}' | sort | uniq -c

	RESULT OF COMMAND:
		3610 Genbank

# check if chromosome bias exists in exon
zcat GCA_003097695.1_ASM309769v1_genomic.gtf.gz | awk -F"\t" '$3=="exon" {print $0}' | awk -F"\t" '{print $1}' | sort | uniq -c

	RESULT OF COMMAND:
		120 CP028894.1
		4 CP028895.1


# check chromsome bias in CDS
zcat GCA_003097695.1_ASM309769v1_genomic.gtf.gz | awk -F"\t" '$3=="CDS" {print $0}' | awk -F"\t" '{print $1}' | sort | uniq -c
	
	RESULT OF COMMAND:
		2635 CP028894.1
		975 CP028895.1




# generate bed file of exon/CDS to determine if there is any overlap between exon and cds regions

zcat GCA_003097695.1_ASM309769v1_genomic.gtf.gz | awk -F"\t" '$3=="exon" {print $1"\t"$4"\t"$5"\t.\t"$7}' > exon_regions.bed

zcat GCA_003097695.1_ASM309769v1_genomic.gtf.gz | awk -F"\t" '$3=="CDS" {print $1"\t"$4"\t"$5"\t.\t"$7}' > CDS_regions.bed

sort -k 1,1 -k2,2n exon_regions.bed > exon_regions_sorted.bed
sort -k 1,1 -k2,2n CDS_regions.bed > CDS_regions_sorted.bed
# use bedtools to determine if there is any overlap while forcing strandedness to be the same (-s parameter)
~/Downloads/software/bedtools2/bin/intersectBed -a exon_regions.bed -b CDS_regions.bed -s
~/Downloads/software/bedtools2/bin/intersectBed -b exon_regions.bed -a CDS_regions.bed -s

# To confirm final validation and cleaning, first generated a mapping table using custom code gtf_checks.py (def geneid_mapping_table(gtf)): 
# Then used LibreOffice to determine how to deal with empty and duplicate "notes" sections which is going to be used for gene and transcript IDs
	1.  If empty or NA, use gene_id (column 1)
	2.  If duplicate, append gene name if exists; if gene name does not exist append gene_id (column 1)
	3.  Drop the NC ids in updated gene and transcript ids
	4.  Remove NA~ and () from tRNAs

# To update and generate the final gtf, use custom code gtf_checks.py:
	final gtf name: GCA_003097695.1_ASM309769v1_updated.gtf

# Generate RSEM indices
~/Downloads/software/RSEM-1.3.3/rsem-prepare-reference --gtf GCA_003097695.1_ASM309769v1_updated.gtf GCA_003097695.1_ASM309769v1_genomic.fna RSEM_reference/GCA_003097695.1_ASM309769v1_indexprefix

# Generate STAR indices
STAR --runMode genomeGenerate --genomeDir GCA_003097695.1_ASM309769v1/STAR_index/ --runThreadN 3 --genomeFastaFiles GCA_003097695.1_ASM309769v1/GCA_003097695.1_ASM309769v1_genomic.fna --sjdbGTFfile GCA_003097695.1_ASM309769v1_updated.gtf --sjdbOverhang 150 --genomeSAindexNbases 9


# Check RSEM vs STAR indices to make sure they contain exactly the same reference sequences:
grep "^>" RSEM_reference/GCA_003097695.1_ASM309769v1_indexprefix.transcripts.fa | sed 's/>//g' | sort > ../test1.rsem
awk -F"\t" '{print $1}' STAR_indices/transcriptInfo.tab | sort  > ../test1.star
# check if genes unique to test1.rsem
comm -13 test1.star test1.rsem 
# check if genes unique to test1.star
comm -23 test1.star test1.rsem 

#Change these names to be the same in each file; keep in mind no spaces or special characters are allowed in the gene_id and transcript_id fields otherwise it will pose problems, so rename to exclude those characters

